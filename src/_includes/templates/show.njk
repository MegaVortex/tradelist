{% extends "base.njk" %}

{% block content %}
<div class="table-wrapper" style="margin-top: 5px;">
  <table>
    <thead>
      <tr>
        <th>Band</th>
        <th>Date</th>
        <th>City</th>
        <th>State</th>
        <th>Country</th>
        <th>Event</th>
        <th>Show</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          {% if show.bands and show.bands.length %}
            {{ show.bands | join(", ") }}
          {% else %}
            ‚Äî
          {% endif %}
        </td>
        <td>
          {% if show.startDateUnix %}
            {{ show.startDateUnix | date("yyyy-MM-dd") }}
          {% elif show.startDate %}
            {% set sd = show.startDate %}
            {% if sd.day and sd.month and sd.year %}
              {{ sd.year }}-{{ sd.month }}-{{ sd.day }}
            {% elif sd.month and sd.year %}
              {{ sd.year }}-{{ sd.month }}
            {% elif sd.year %}
              {{ sd.year }}
            {% else %}
              ‚Äî
            {% endif %}
          {% else %}
            ‚Äî
          {% endif %}
        </td>
        <td>{{ show.location.city or "‚Äî" }}</td>
        <td>{{ show.location.state or "‚Äî" }}</td>
        <td>{{ show.location.country or "‚Äî" }}</td>
        <td>{{ show.location.event or "‚Äî" }}</td>
        <td>{{ show.showName or "‚Äî" }}</td>
      </tr>
    </tbody>
  </table>
</div>

<div class="table-wrapper" style="margin-top: 10px;">
  <table>
    <thead>
      <tr>
        <th>Details</th>
        <th>Images</th>
        <th>Setlist</th>
      </tr>
    </thead>
    <tbody>
      <tr>
      <td>
      <!-- DETAILS -->
      <div style="display: table-cell; padding: 10px;">
        <p><strong>TV Channel:</strong> {{ show.tvChannel }}</p>
        <p><strong>Source:</strong> {{ show.source }}</p>
        <p><strong>Length:</strong> {{ show.specs.length | formatTime }}</p>
        <p><strong>Media:</strong>
          {% for m in show.specs.media %}
            {{ m.type }} ({{ m.size }}{{ m.unit }}){% if not loop.last %}, {% endif %}
          {% endfor %}
        </p>
        <p><strong>Video:</strong>
          {% if show.specs.video and show.specs.video.length %}
            {% set v = show.specs.video[0] %}
            {{ v.standard }} {{ v.resolution }} {{ v.ratio }} {{ v.tvFormat }}, {{ v.fps }}fps
          {% endif %}
        </p>
        <p><strong>Audio:</strong>
          {% if show.specs.audio and show.specs.audio.length %}
            {% set a = show.specs.audio[0] %}
            {{ a.codec }} {{ a.channels }}ch @ {{ a.rateHz }}Hz
          {% endif %}
        </p>
        <p><strong>Recording Type:</strong> {{ show.specs.sourceDetail.recordingType }}</p>
        <p><strong>Source Media:</strong> {{ show.specs.sourceDetail.sourceMediaType }}</p>
        <p><strong>Final Format:</strong> {{ show.specs.sourceDetail.finalMediaType }}</p>
        <p><strong>File Format:</strong> {{ show.specs.sourceDetail.fileFormat }}</p>
        <p><strong>Taper(s):</strong> {{ show.tapers | join(", ") }}</p>
        <p><strong>Trade Label:</strong> {{ show.tradeLabel }}</p>
        <p><strong>Master Copy:</strong>
          {% if show.master %}Yes{% else %}No{% endif %}
        </p>
        <p><strong>Authored By:</strong> {{ show.authoredBy }}</p>
        <p><strong>Transferred By:</strong> {{ show.transferredBy }}</p>
      </td>

      <!-- IMAGES -->
      <td>
        {% if show.images %}
          {% for img in show.images.slice(0, 4) %}
            <img src="https://drive.google.com/thumbnail?id={{ img.externalId }}&sz=w192"
                 alt="thumb"
                 width="192"
                 height="132"
                 style="display: flex; flex-direction: column; gap: 10px;"
                 onclick='openModal("{{ img.externalId }}", {{ show.images | dump | safe }})'>
          {% endfor %}
        {% else %}
          ‚Äî
        {% endif %}
      </td>

      <!-- SETLIST -->
      <td>
        {% if show.setlist and show.setlist.length %}
          <ol>
            {% for item in show.setlist %}
              <li>
                {{ item.song }}
                {% if item.feat %}<em> feat. {{ item.feat }}</em>{% endif %}
                {% if item.coverOf %} (cover of {{ item.coverOf }}){% endif %}
                {% if item.note %} ‚Äî <small>{{ item.note }}</small>{% endif %}
              </li>
            {% endfor %}
          </ol>
        {% else %}
          <p>No setlist available.</p>
        {% endif %}
      </td>
      </tr>
    </tbody>
  </table>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  var thumbs = document.querySelectorAll('.image-thumb');
  var modal = document.getElementById('imageModal');
  var modalIframe = document.getElementById('driveViewer');
  var captionText = document.getElementById('caption');
  var closeBtn = document.querySelector('#imageModal .close');
  var nextBtn = document.querySelector('#imageModal .next');
  var prevBtn = document.querySelector('#imageModal .prev');
  var currentIndex = 0;

  thumbs.forEach(function(thumb, idx) {
    thumb.addEventListener('click', function(e) {
      e.preventDefault();
      currentIndex = idx;
      var id = thumb.getAttribute('data-drive-id');
      modal.style.display = 'flex';
      modalIframe.src = 'https://drive.google.com/file/d/' + id + '/preview';
      captionText.textContent = thumb.querySelector('img').alt || '';
    });
  });

  closeBtn.addEventListener('click', function() {
    modal.style.display = 'none';
    modalIframe.src = '';
  });

  nextBtn.addEventListener('click', function() {
    currentIndex = (currentIndex + 1) % thumbs.length;
    thumbs[currentIndex].click();
  });

  prevBtn.addEventListener('click', function() {
    currentIndex = (currentIndex - 1 + thumbs.length) % thumbs.length;
    thumbs[currentIndex].click();
  });

  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      modal.style.display = 'none';
      modalIframe.src = '';
    }
  });
});
</script>
<!-- Modal for image preview -->
<div id="imageModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background-color:rgba(0,0,0,0.7); z-index:1000; align-items:center; justify-content:center;">
  <div style="position:relative; width:90%; height:90%;">
    <span onclick="closeModal()" style="position:absolute; top:11px; right:60px; font-size:2rem; color:white; background-color:rgba(0,0,0,0.6); padding:1px 10px; border-radius:4px; cursor:pointer;">√ó</span>
	<button id="modalPrev" style="position:absolute; left:10px; top:50%; transform:translateY(-50%); font-size:2rem; background:rgba(0,0,0,0.6); color:white; border:none; padding:8px 12px; cursor:pointer;">‚Üê</button>
	<button id="modalNext" style="position:absolute; right:10px; top:50%; transform:translateY(-50%); font-size:2rem; background:rgba(0,0,0,0.6); color:white; border:none; padding:8px 12px; cursor:pointer;">‚Üí</button>
    <iframe id="modalImage" style="width:100%; height:100%; border:none; border-radius:0px;"></iframe>
  </div>
</div>

<script>
  let currentImages = [];
  let currentIndex = 0;

  function openModal(id, images = []) {
    currentImages = images;
    currentIndex = images.findIndex(img => img.externalId === id);
    showImageAt(currentIndex);
    document.getElementById('imageModal').style.display = 'flex';
  }

  function showImageAt(index) {
  const img = currentImages[index];
  if (!img) return;
  
  const iframe = document.getElementById('modalImage');
  iframe.src = `https://drive.google.com/file/d/${img.externalId}/preview`;
  
  // Show/hide arrows
  document.getElementById('modalPrev').style.display = index > 0 ? 'block' : 'none';
  document.getElementById('modalNext').style.display = index < currentImages.length - 1 ? 'block' : 'none';
  }

  function closeModal() {
    document.getElementById('imageModal').style.display = 'none';
    document.getElementById('modalImage').src = '';
    currentImages = [];
    currentIndex = 0;
  }

  function nextImage() {
    if (currentIndex < currentImages.length - 1) {
      currentIndex++;
      showImageAt(currentIndex);
    }
  }

  function prevImage() {
    if (currentIndex > 0) {
      currentIndex--;
      showImageAt(currentIndex);
    }
  }
  
  function updateShowCount() {
    const allRows = [...document.querySelectorAll('#shows-table tbody tr')];
    const visibleShows = allRows.filter(row =>
      row.style.display !== 'none' &&
      !row.classList.contains('year-label-row') &&
      !row.classList.contains('band-label-row') &&
      !row.classList.contains('category-label-row')
    );
    document.getElementById('show-count').textContent = `Shows: ${visibleShows.length}`;
  }
  
function insertGroupLabels() {
  const tbody = document.querySelector('#shows-table tbody');
  const rows = [...tbody.querySelectorAll('tr')];
  const visible = rows.filter(r => r.style.display !== 'none' && !r.hasAttribute('data-label'));

  // Remove existing label rows
  rows.forEach(r => r.hasAttribute('data-label') && r.remove());

  if (!selectedBand) {
    // Group by band (default)
    let currentBand = null;
    for (const row of visible) {
      const band = row.dataset.band || '‚Äî';
      if (band !== currentBand) {
        currentBand = band;
        const label = document.createElement('tr');
        label.className = 'band-label-row';
        label.setAttribute('data-label', 'true');
        label.innerHTML = `<td colspan="11" class="band-label">üé∏ ${band}</td>`;
        tbody.insertBefore(label, row);
      }
    }
    return;
  }

  // When band is selected
  const CATEGORY_ORDER = {
    'video': 1,
    'video_misc': 2,
    'video_compilation': 3,
    'audio': 4,
    'audio_misc': 5
  };

  const groups = {};  // { 'video': { year: [rows] } }

  for (const row of visible) {
    const raw = row.dataset.json;
    if (!raw) continue;

    let show;
    try {
      show = JSON.parse(decodeURIComponent(raw));
    } catch (e) {
      continue;
    }

  const catArr = show.category || [];
  let catKey = '';
  
  if (Array.isArray(catArr)) {
    const set = new Set(catArr);
  
    if (set.has('video') && set.size === 1) {
      catKey = 'video';
    } else if ((set.has('video') && set.has('misc')) || (set.has('misc') && set.size === 1)) {
      catKey = 'video_misc';
    } else if ((set.has('video') && set.has('compilation')) || (set.has('compilation') && set.size === 1)) {
      catKey = 'video_compilation';
    } else if (set.has('audio') && set.size === 1) {
      catKey = 'audio';
    } else if (set.has('audio') && set.has('misc')) {
      catKey = 'audio_misc';
    } else {
      catKey = 'other';
    }
  }

    const year = show.startDateUnix
      ? new Date(show.startDateUnix * 1000).getFullYear().toString()
      : '‚Äî';

    if (!groups[catKey]) groups[catKey] = {};
    if (!groups[catKey][year]) groups[catKey][year] = [];
    groups[catKey][year].push(row);
  }

  const emojiFor = {
    video: 'üé• Video',
    video_misc: 'üé• Misc',
    video_compilation: 'üé• Compilation',
    audio: 'üîä Audio',
    audio_misc: 'üîä Audio Misc',
    other: '‚ùì Other'
  };

  const orderedKeys = Object.keys(CATEGORY_ORDER)
    .concat('other')
    .filter(k => groups[k]);

  for (const key of orderedKeys) {
    const catGroup = groups[key];
    if (!catGroup) continue;

    const catLabelRow = document.createElement('tr');
    catLabelRow.setAttribute('data-label', 'true');
	catLabelRow.className = 'category-label-row';
	catLabelRow.innerHTML = `<td colspan="11" class="category-label">${emojiFor[key]}</td>`;
    tbody.appendChild(catLabelRow);

    const sortedYears = Object.keys(catGroup).sort((a, b) => a.localeCompare(b));

    for (const year of sortedYears) {
      const yearLabelRow = document.createElement('tr');
      yearLabelRow.setAttribute('data-label', 'true');
      yearLabelRow.className = 'year-label-row';
      yearLabelRow.innerHTML = `<td colspan="11" class="year-label">üìÖ ${year}</td>`;
      tbody.appendChild(yearLabelRow);

      for (const row of catGroup[year]) {
        tbody.appendChild(row);
      }
    }
  }
}


  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeModal();
    if (e.key === 'ArrowRight') nextImage();
    if (e.key === 'ArrowLeft') prevImage();
  });

  document.getElementById('modalNext').onclick = nextImage;
  document.getElementById('modalPrev').onclick = prevImage;
  document.addEventListener('DOMContentLoaded', () => {
});
document.addEventListener("click", function (e) {
  if (e.target.matches(".toggle-media")) {
    e.preventDefault();
    const targetId = e.target.dataset.target;
    const block = document.getElementById(targetId);
    if (!block) return;

    const isVisible = block.style.display === "block";
    block.style.display = isVisible ? "none" : "block";
    e.target.innerHTML = isVisible
      ? `‚ñæ +${block.children.length}`
      : `‚ñ¥`;
  }
});

</script>

{% endblock %}