{% extends "base.njk" %}

{% block title %}All Shows{% endblock %}

{% block content %}
<div class="table-wrapper">
<div id="letter-bar" style="margin-top: -10px; font-size: 14px;"></div>
<div id="band-dropdown-wrapper" style="margin-top: 10px; margin-bottom: 20px; display: none; font-size: 14px;">
  <label for="band-dropdown" style="margin-right: 8px;"><strong>Filter by band:</strong></label>
  <select id="band-dropdown">
     <option value="" disabled selected>‚Äî Select band ‚Äî</option>
  </select>
</div>
<table id="shows-table">
  <thead>
    <tr>
      <th>Artist</th>
      <th>Date</th>
      <th>Location</th>
	  <th>Venue</th>
      <th>Length</th>
      <th>Format</th>
      <th>Type</th>
      <th>Source</th>
      <th>Taper(s)</th>
      <th>Images</th>
      <th>Page</th>
    </tr>
  </thead>
  <tbody>
    {% set currentGroup = null %}
    {% for show in shows | sort(attribute='startDateUnix') %}
      {% if show.public %}
		{% set groupKey = show.bands[0] %}
  
        {% if groupKey != currentGroup %}
		{% set currentGroup = groupKey %}
		<tr class="band-label-row" data-label="true">
			<td colspan="11" class="band-label">üé∏ {{ groupKey }}</td>
		</tr>
		{% endif %}
  
        <tr data-band="{{ show.bands[0] }}" data-json="{{ show | dump | urlencode }}">
          <td>
            {% if show.bands %}
              {{ show.bands | join(", ") }}
            {% else %}
              ‚Äî
            {% endif %}
          </td>
          <td>
            {% if show.startDateUnix %}
              {{ show.startDateUnix | date("yyyy-MM-dd") }}
            {% else %}
              ‚Äî
            {% endif %}
          </td>
          <td>
            {% if show.location %}
              {{ show.location.city or "" }}{% if show.location.state %}, {{ show.location.state }}{% endif %}, {{ show.location.country or "" }}
            {% else %}
              ‚Äî
            {% endif %}
          </td>
          <td>
            {{ show.location.venue or "‚Äî" }}
          </td>
          <td>
            {% if show.specs and show.specs.length %}
              {{ show.specs.length | formatTime }}
            {% else %}
              ‚Äî
            {% endif %}
          </td>
          <td>
            {% if show.specs and show.specs.sourceDetail %}
              {{ show.specs.sourceDetail.fileFormat or "‚Äî" }}
            {% else %}
              ‚Äî
            {% endif %}
          </td>
          <td class="type-cell">
            {% if show.specs and show.specs.sourceDetail %}
              {{ show.specs.sourceDetail.recordingType or "‚Äî" }}
              {% if show.category == "audio" %}
                <span class="type-label audio-label">audio</span>
              {% elif "misc" in show.category %}
                <span class="type-label misc-label">misc</span>
              {% endif %}
            {% else %}
              ‚Äî
            {% endif %}
          </td>
          <td>
            <div class="source-wrapper">
              {{ show.source or "‚Äî" }}
              {% if show.fileSlug and show.fileSlug.includes('show_1') %}
                <span class="show-label label-show1">Show 1</span>
              {% elif show.fileSlug and show.fileSlug.includes('show_2') %}
                <span class="show-label label-show2">Show 2</span>
              {% endif %}
            </div>
          </td>
          <td style="position: relative;">
            {% if show.tapers %}
              {{ show.tapers | join(", ") }}
            {% else %}
              ‚Äî 
            {% endif %}
  
            {% if show.tradeLabel == 'RT' %}
              <span class="trade-label red">RT</span>
            {% elif show.tradeLabel == 'NT' %}
              <span class="trade-label blue">NT</span>
            {% endif %}
  
            {% if show.master == true or (show.tapers and show.tapers.length == 1 and show.tapers[0] == "Vortex") %}
              <span class="trade-label master">master</span>
            {% endif %}
          </td>
          <td>
            {% if show.images %}
              {% for img in show.images.slice(0, 4) %}
                <img src="https://drive.google.com/thumbnail?id={{ img.externalId }}&sz=w32"
                     alt="thumb"
                     width="32"
                     height="22"
                     style="margin-right: 4px; cursor: pointer; border-radius: 4px;"
                     onclick='openModal("{{ img.externalId }}", {{ show.images | dump | safe }})'>
              {% endfor %}
            {% else %}
              ‚Äî
            {% endif %}
          </td>
          <td>
            <a href="/shows/{{ show.fileSlug }}/" title="View" style="font-size: 1.20em;">üìù</a>
          </td>
        </tr>
      {% endif %}
    {% endfor %}
	
<script>
  let currentLetter = 'all';
  let tableRows = [];
  
  function updateShowCount() {
    const allRows = [...document.querySelectorAll('#shows-table tbody tr')];
  
    allRows.forEach((row, i) => {
      const label = row.hasAttribute('data-label') ? '[LABEL]' : '[SHOW]';
      const visible = row.style.display !== 'none';
      const classes = row.className;
      console.log(`${i}: ${label} visible=${visible} class=${classes}`);
    });
  
    const visibleShows = allRows.filter(row =>
      row.style.display !== 'none' &&
      !row.hasAttribute('data-label')
    );
    document.getElementById('show-count').textContent = `Shows: ${visibleShows.length}`;
  }

  document.addEventListener('DOMContentLoaded', () => {
    window.selectedBand = null;
    const tbody = document.querySelector('#shows-table tbody');
tableRows = [...tbody.querySelectorAll('tr')];

// Filter only data rows (not label rows)
const showRows = tableRows.filter(r => !r.hasAttribute('data-label'));

// Sort by band, then date
showRows.sort((a, b) => {
  const bandA = (a.dataset.band || '').toLowerCase();
  const bandB = (b.dataset.band || '').toLowerCase();
  if (bandA < bandB) return -1;
  if (bandA > bandB) return 1;

  const dateA = a.querySelector('td:nth-child(2)')?.innerText || '';
  const dateB = b.querySelector('td:nth-child(2)')?.innerText || '';
  return dateA.localeCompare(dateB);
});

// Re-append sorted rows to DOM
showRows.forEach(row => tbody.appendChild(row));

	tableRows.sort((a, b) => {
      const bandA = (a.dataset.band || '').toLowerCase();
      const bandB = (b.dataset.band || '').toLowerCase();
      if (bandA < bandB) return -1;
      if (bandA > bandB) return 1;
    
      const dateA = a.querySelector('td:nth-child(2)')?.innerText || '';
      const dateB = b.querySelector('td:nth-child(2)')?.innerText || '';
      return dateA.localeCompare(dateB);
    });
    const letterBar = document.getElementById('letter-bar');
    const dropdownWrapper = document.getElementById("band-dropdown-wrapper");
    const dropdown = document.getElementById("band-dropdown");

    // --- Build letter filter ---
    const letters = new Set();
    tableRows.forEach(row => {
      const band = row.dataset.band || '';
      const first = band[0]?.toUpperCase();
      if (first) letters.add(/^[A-Z]$/.test(first) ? first : '#');
    });

    const sorted = Array.from(letters).sort();
    const barHTML = ['<strong>Filter:</strong> <a href="#" data-letter="all">ALL</a>']
      .concat(sorted.map(l => `<a href="#" data-letter="${l}">${l}</a>`))
      .join(' | ');
    letterBar.innerHTML = barHTML;

    // --- Letter click filter ---
    letterBar.addEventListener('click', e => {
      if (e.target.tagName !== 'A') return;
      e.preventDefault();
	  window.selectedBand = null;
      const selected = e.target.dataset.letter;
      currentLetter = selected;
      updateDropdown(selected);
      dropdown.selectedIndex = 0;

      // Filter rows by letter
      tableRows.forEach(row => {
        const band = row.dataset.band || '';
        const first = band[0]?.toUpperCase();
        const isNumber = !/^[A-Z]/.test(first);
        const match = selected === 'all' ||
                      (selected === '#' && isNumber) ||
                      (first === selected);
        row.style.display = match ? '' : 'none';
      });
      const tbody = document.querySelector('#shows-table tbody');
	  tableRows = [...tbody.querySelectorAll('tr')];
	  
	  // Filter only data rows (not label rows)
	  const showRows = tableRows.filter(r => !r.hasAttribute('data-label'));
	  
	  // Sort by band, then date
	  showRows.sort((a, b) => {
	  const bandA = (a.dataset.band || '').toLowerCase();
	  const bandB = (b.dataset.band || '').toLowerCase();
	  if (bandA < bandB) return -1;
	  if (bandA > bandB) return 1;
	  
	  const dateA = a.querySelector('td:nth-child(2)')?.innerText || '';
	  const dateB = b.querySelector('td:nth-child(2)')?.innerText || '';
	  return dateA.localeCompare(dateB);
	  });
	  
	  // Re-append sorted rows to DOM
	  showRows.forEach(row => tbody.appendChild(row));

      updateShowCount();
	  insertGroupLabels();
    });

    // --- Band dropdown logic ---
    function updateDropdown(letter) {
      const bandMap = new Map();
      tableRows.forEach(row => {
        const band = row.dataset.band || '';
        const first = band[0]?.toUpperCase();
        const cell = row.querySelector('td');
        const display = cell ? cell.innerText.trim() : '';

        if (
          (letter === 'all') ||
          (letter === '#' && !/^[A-Z]/.test(first)) ||
          (first === letter)
        ) {
          if (band && display) bandMap.set(band, display);
        }
      });

      const sortedBands = Array.from(bandMap.entries()).sort((a, b) =>
        a[1].localeCompare(b[1])
      );

      dropdown.innerHTML =
        `<option value="" disabled selected>‚Äî Select band ‚Äî</option>` +
        sortedBands.map(([key, label]) =>
          `<option value="${label}">${label}</option>`
        ).join('');

      dropdownWrapper.style.display = sortedBands.length ? 'block' : 'none';
    }

    dropdown.addEventListener("change", () => {
      const selectedBand = dropdown.value;
      if (!selectedBand) return;
	  window.selectedBand = selectedBand;

      tableRows.forEach(row => {
        const band = row.dataset.band || '';
        const first = band[0]?.toUpperCase();
        const isNumber = !/^[A-Z]/.test(first);
        const matchLetter =
          currentLetter === 'all' ||
          (currentLetter === '#' && isNumber) ||
          first === currentLetter;
        const matchBand = band.toLowerCase() === selectedBand.toLowerCase();
        row.style.display = matchLetter && matchBand ? '' : 'none';
      });

      updateShowCount();
	  insertGroupLabels();
    });
    updateShowCount();
	insertGroupLabels();
  });
</script>
  </tbody>

</table>

<!-- Modal for image preview -->
<div id="imageModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background-color:rgba(0,0,0,0.7); z-index:1000; align-items:center; justify-content:center;">
  <div style="position:relative; width:90%; height:90%;">
    <span onclick="closeModal()" style="position:absolute; top:11px; right:60px; font-size:2rem; color:white; background-color:rgba(0,0,0,0.6); padding:1px 10px; border-radius:4px; cursor:pointer;">√ó</span>
	<button id="modalPrev" style="position:absolute; left:10px; top:50%; transform:translateY(-50%); font-size:2rem; background:rgba(0,0,0,0.6); color:white; border:none; padding:8px 12px; cursor:pointer;">‚Üê</button>
	<button id="modalNext" style="position:absolute; right:10px; top:50%; transform:translateY(-50%); font-size:2rem; background:rgba(0,0,0,0.6); color:white; border:none; padding:8px 12px; cursor:pointer;">‚Üí</button>
    <iframe id="modalImage" style="width:100%; height:100%; border:none; border-radius:0px;"></iframe>
  </div>
</div>

<script>
  let currentImages = [];
  let currentIndex = 0;

  function openModal(id, images = []) {
    currentImages = images;
    currentIndex = images.findIndex(img => img.externalId === id);
    showImageAt(currentIndex);
    document.getElementById('imageModal').style.display = 'flex';
  }

  function showImageAt(index) {
  const img = currentImages[index];
  if (!img) return;
  
  const iframe = document.getElementById('modalImage');
  iframe.src = `https://drive.google.com/file/d/${img.externalId}/preview`;
  
  // Show/hide arrows
  document.getElementById('modalPrev').style.display = index > 0 ? 'block' : 'none';
  document.getElementById('modalNext').style.display = index < currentImages.length - 1 ? 'block' : 'none';
  }

  function closeModal() {
    document.getElementById('imageModal').style.display = 'none';
    document.getElementById('modalImage').src = '';
    currentImages = [];
    currentIndex = 0;
  }

  function nextImage() {
    if (currentIndex < currentImages.length - 1) {
      currentIndex++;
      showImageAt(currentIndex);
    }
  }

  function prevImage() {
    if (currentIndex > 0) {
      currentIndex--;
      showImageAt(currentIndex);
    }
  }
  
  function updateShowCount() {
    const allRows = [...document.querySelectorAll('#shows-table tbody tr')];
    const visibleShows = allRows.filter(row =>
      row.style.display !== 'none' &&
      !row.classList.contains('year-label-row') &&
      !row.classList.contains('band-label-row') &&
      !row.classList.contains('category-label-row')
    );
    document.getElementById('show-count').textContent = `Shows: ${visibleShows.length}`;
  }
  
function insertGroupLabels() {
  const tbody = document.querySelector('#shows-table tbody');
  const rows = [...tbody.querySelectorAll('tr')];
  const visible = rows.filter(r => r.style.display !== 'none' && !r.hasAttribute('data-label'));

  // Remove existing label rows
  rows.forEach(r => r.hasAttribute('data-label') && r.remove());

  if (!selectedBand) {
    // Group by band (default)
    let currentBand = null;
    for (const row of visible) {
      const band = row.dataset.band || '‚Äî';
      if (band !== currentBand) {
        currentBand = band;
        const label = document.createElement('tr');
        label.className = 'band-label-row';
        label.setAttribute('data-label', 'true');
        label.innerHTML = `<td colspan="11" class="band-label">üé∏ ${band}</td>`;
        tbody.insertBefore(label, row);
      }
    }
    return;
  }

  // When band is selected
  const CATEGORY_ORDER = {
    'video': 1,
    'video_misc': 2,
    'video_compilation': 3,
    'audio': 4,
    'audio_misc': 5
  };

  const groups = {};  // { 'video': { year: [rows] } }

  for (const row of visible) {
    const raw = row.dataset.json;
    if (!raw) continue;

    let show;
    try {
      show = JSON.parse(decodeURIComponent(raw));
    } catch (e) {
      continue;
    }

  const catArr = show.category || [];
  let catKey = '';
  
  if (Array.isArray(catArr)) {
    const set = new Set(catArr);
  
    if (set.has('video') && set.size === 1) {
      catKey = 'video';
    } else if ((set.has('video') && set.has('misc')) || (set.has('misc') && set.size === 1)) {
      catKey = 'video_misc';
    } else if ((set.has('video') && set.has('compilation')) || (set.has('compilation') && set.size === 1)) {
      catKey = 'video_compilation';
    } else if (set.has('audio') && set.size === 1) {
      catKey = 'audio';
    } else if (set.has('audio') && set.has('misc')) {
      catKey = 'audio_misc';
    } else {
      catKey = 'other';
    }
  }

    const year = show.startDateUnix
      ? new Date(show.startDateUnix * 1000).getFullYear().toString()
      : '‚Äî';

    if (!groups[catKey]) groups[catKey] = {};
    if (!groups[catKey][year]) groups[catKey][year] = [];
    groups[catKey][year].push(row);
  }

  const emojiFor = {
    video: 'üé• Video',
    video_misc: 'üé• Misc',
    video_compilation: 'üé• Compilation',
    audio: 'üîä Audio',
    audio_misc: 'üîä Audio Misc',
    other: '‚ùì Other'
  };

  const orderedKeys = Object.keys(CATEGORY_ORDER)
    .concat('other')
    .filter(k => groups[k]);

  for (const key of orderedKeys) {
    const catGroup = groups[key];
    if (!catGroup) continue;

    const catLabelRow = document.createElement('tr');
    catLabelRow.setAttribute('data-label', 'true');
	catLabelRow.className = 'category-label-row';
	catLabelRow.innerHTML = `<td colspan="11" class="category-label">${emojiFor[key]}</td>`;
    tbody.appendChild(catLabelRow);

    const sortedYears = Object.keys(catGroup).sort((a, b) => a.localeCompare(b));

    for (const year of sortedYears) {
      const yearLabelRow = document.createElement('tr');
      yearLabelRow.setAttribute('data-label', 'true');
      yearLabelRow.className = 'year-label-row';
      yearLabelRow.innerHTML = `<td colspan="11" class="year-label">üìÖ ${year}</td>`;
      tbody.appendChild(yearLabelRow);

      for (const row of catGroup[year]) {
        tbody.appendChild(row);
      }
    }
  }
}


  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeModal();
    if (e.key === 'ArrowRight') nextImage();
    if (e.key === 'ArrowLeft') prevImage();
  });

  document.getElementById('modalNext').onclick = nextImage;
  document.getElementById('modalPrev').onclick = prevImage;
  document.addEventListener('DOMContentLoaded', () => {
});
</script>

</div>
<p id="show-count" style="font-size: 14px;">Shows: {{ publicShows | length }}</p>
{% endblock %}